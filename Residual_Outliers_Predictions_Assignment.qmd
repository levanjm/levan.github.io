---
title: "Residuals Outliers and Predictions"
author: "Mike LeVan"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Exercises

In this assignment, you will be told which data set and two different quantitative 
variables to analyse. The data sets are already built into R so you don't
have to download any of the data. You will create scatterplots with 
linear models using `ggplot2`, determine any possible outliers or influential 
observations, calculate the residuals, make a residual plot, and use the 
linear model to make three predictions, where one of the values is an 
example of extrapolation. 

**Steps**

1. **Create a Scatterplot with Linear Model:**
   - Use `ggplot2` to create a scatterplot of the two variables.
   - Add a linear model to the scatterplot using `geom_smooth` with the `lm` method.

2. **Determine Possible Outliers or Influential Observations:**
   - Identify any potential outliers or influential points from the scatterplot.

3. **Calculate Residuals:**
   - Fit a linear model using `lm()`.
   - Extract the residuals from the model.

4. **Make a Residual Plot:**
   - Create a residual plot using `ggplot2`.

5. **Make Predictions Using the Linear Model:**
   - Use the `predict()` function to make three predictions.
   - Ensure that one of the values used for prediction is an example of extrapolation (a value outside the range of the original data).

### Problem 1: Iris Dataset - Sepal Length vs Petal Length

```{r}
# Load ggplot2 and iris dataset
library(ggplot2)
data(iris)

# Scatterplot with linear model
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Scatterplot of Sepal Length vs Petal Length with Linear Model", x = "Sepal Length", y = "Petal Length")

# Fit linear model
model_iris <- lm(Petal.Length ~ Sepal.Length, data = iris)

# Calculate residuals
residuals_iris <- resid(model_iris)

# Residual plot
ggplot(iris, aes(x = Sepal.Length, y = residuals_iris)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Residual Plot of Sepal Length vs Petal Length", x = "Sepal Length", y = "Residuals")

# Make predictions
predictions <- predict(model_iris, newdata = data.frame(Sepal.Length = c(5, 6, 10))) # 10 is extrapolated
predictions
```

### Problem 2: Airquality Dataset - Ozone vs Wind

```{r}
# Load ggplot2 and airquality dataset
library(ggplot2)
data(airquality)

# Remove NA values
airquality_clean <- na.omit(airquality)

# Scatterplot with linear model
ggplot(airquality_clean, aes(x = Ozone, y = Wind)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Scatterplot of Ozone vs Wind with Linear Model", x = "Ozone", y = "Wind")

# Fit linear model
model_airquality <- lm(Wind ~ Ozone, data = airquality_clean)

# Calculate residuals
residuals_airquality <- resid(model_airquality)

# Residual plot
ggplot(airquality_clean, aes(x = Ozone, y = residuals_airquality)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Residual Plot of Ozone vs Wind", x = "Ozone", y = "Residuals")

# Make predictions
predictions <- predict(model_airquality, newdata = data.frame(Ozone = c(50, 100, 200))) # 200 is extrapolated
predictions
```

### Problem 3: ToothGrowth Dataset - Dose vs Length

```{r}
# Load ggplot2 and ToothGrowth dataset
library(ggplot2)
data(ToothGrowth)

# Scatterplot with linear model
ggplot(ToothGrowth, aes(x = dose, y = len)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Scatterplot of Dose vs Length with Linear Model", x = "Dose", y = "Length")

# Fit linear model
model_toothgrowth <- lm(len ~ dose, data = ToothGrowth)

# Calculate residuals
residuals_toothgrowth <- resid(model_toothgrowth)

# Residual plot
ggplot(ToothGrowth, aes(x = dose, y = residuals_toothgrowth)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Residual Plot of Dose vs Length", x = "Dose", y = "Residuals")

# Make predictions
predictions <- predict(model_toothgrowth, newdata = data.frame(dose = c(0.5, 1, 3))) # 3 is extrapolated
predictions
```

### Problem 4: Cars Dataset - Speed vs Stopping Distance

```{r}
# Load ggplot2 and cars dataset
library(ggplot2)
data(cars)

# Scatterplot with linear model
ggplot(cars, aes(x = speed, y = dist)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Scatterplot of Speed vs Stopping Distance with Linear Model", x = "Speed", y = "Stopping Distance")

# Fit linear model
model_cars <- lm(dist ~ speed, data = cars)

# Calculate residuals
residuals_cars <- resid(model_cars)

# Residual plot
ggplot(cars, aes(x = speed, y = residuals_cars)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Residual Plot of Speed vs Stopping Distance", x = "Speed", y = "Residuals")

# Make predictions
predictions <- predict(model_cars, newdata = data.frame(speed = c(10, 15, 30))) # 30 is extrapolated
predictions
```

### Problem 5: Faithful Dataset - Eruptions vs Waiting Time

```{r}
# Load ggplot2 and faithful dataset
library(ggplot2)
data(faithful)

# Scatterplot with linear model
ggplot(faithful, aes(x = eruptions, y = waiting)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Scatterplot of Eruptions vs Waiting Time with Linear Model", x = "Eruptions", y = "Waiting Time")

# Fit linear model
model_faithful <- lm(waiting ~ eruptions, data = faithful)

# Calculate residuals
residuals_faithful <- resid(model_faithful)

# Residual plot
ggplot(faithful, aes(x = eruptions, y = residuals_faithful)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Residual Plot of Eruptions vs Waiting Time", x = "Eruptions", y = "Residuals")

# Make predictions
predictions <- predict(model_faithful, newdata = data.frame(eruptions = c(2, 3, 5))) # 5 is extrapolated
predictions
```

### Problem 6: ChickWeight Dataset - Time vs Weight

```{r}
# Load ggplot2 and ChickWeight dataset
library(ggplot2)
data(ChickWeight)

# Scatterplot with linear model
ggplot(ChickWeight, aes(x = Time, y = weight)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Scatterplot of Time vs Weight with Linear Model", x = "Time", y = "Weight")

# Fit linear model
model_chickweight <- lm(weight ~ Time, data = ChickWeight)

# Calculate residuals
residuals_chickweight <- resid(model_chickweight)

# Residual plot
ggplot(ChickWeight, aes(x = Time, y = residuals_chickweight)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Residual Plot of Time vs Weight", x = "Time", y = "Residuals")

# Make predictions
predictions <- predict(model_chickweight, newdata = data.frame(Time = c(10, 20, 50))) # 50 is extrapolated
predictions
```

### Problem 7: Pressure Dataset - Temperature vs Pressure

```{r}
# Load ggplot2 and pressure dataset
library(ggplot2)
data(pressure)

# Scatterplot with linear model
ggplot(pressure, aes(x = temperature, y = pressure)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Scatterplot of Temperature vs Pressure with Linear Model", x = "Temperature", y = "Pressure")

# Fit linear model
model_pressure <- lm(pressure ~ temperature, data = pressure)

# Calculate residuals
residuals_pressure <- resid(model_pressure)

# Residual plot
ggplot(pressure, aes(x = temperature, y = residuals_pressure)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Residual Plot of Temperature vs Pressure", x = "Temperature", y = "Residuals")

# Make predictions
predictions <- predict(model_pressure, newdata = data.frame(temperature = c(0, 100, 500))) # 500 is extrapolated
predictions
```

### Problem 8: Trees Dataset - Girth vs Volume

```{r}
# Load ggplot2 and trees dataset
library(ggplot2)
data(trees)

# Scatterplot with linear model
ggplot(trees, aes(x = Girth, y = Volume)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Scatterplot of Girth vs Volume with Linear Model", x = "Girth", y = "Volume")

# Fit linear model
model_trees <- lm(Volume ~ Girth, data = trees)

# Calculate residuals
residuals_trees <- resid(model_trees)

# Residual plot
ggplot(trees, aes(x = Girth, y = residuals_trees)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Residual Plot of Girth vs Volume", x = "Girth", y = "Residuals")

# Make predictions
predictions <- predict(model_trees, newdata = data.frame(Girth = c(8, 12, 20))) # 20 is extrapolated
predictions
```

### Problem 9: USArrests Dataset - Urban Population vs Assaults

```{r}
# Load ggplot2 and USArrests dataset
library(ggplot2)
data(USArrests)

# Scatterplot with linear model
ggplot(USArrests, aes(x = UrbanPop, y = Assault)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Scatterplot of Urban Population vs Assaults with Linear Model", x = "Urban Population", y = "Assaults")

# Fit linear model
model_usarrests <- lm(Assault ~ UrbanPop, data = USArrests)

# Calculate residuals
residuals_usarrests <- resid(model_usarrests)

# Residual plot
ggplot(USArrests, aes(x = UrbanPop, y = residuals_usarrests)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Residual Plot of Urban Population vs Assaults", x = "Urban Population", y = "Residuals")

# Make predictions
predictions <- predict(model_usarrests, newdata = data.frame(UrbanPop = c(50, 80, 100))) # 100 is extrapolated
predictions
```

### Problem 10: Swiss Dataset - Education vs Fertility

```{r}
# Load ggplot2 and swiss dataset
library(ggplot2)
data(swiss)

# Scatterplot with linear model
ggplot(swiss, aes(x = Education, y = Fertility)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Scatterplot of Education vs Fertility with Linear Model", x = "Education", y = "Fertility")

# Fit linear model
model_swiss <- lm(Fertility ~ Education, data = swiss)

# Calculate residuals
residuals_swiss <- resid(model_swiss)

# Residual plot
ggplot(swiss, aes(x = Education, y = residuals_swiss)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Residual Plot of Education vs Fertility", x = "Education", y = "Residuals")

# Make predictions
predictions <- predict(model_swiss, newdata = data.frame(Education = c(10, 20, 50))) # 50 is extrapolated
predictions
```


