# Vectors, Data Frames, Tibbles {.unnumbered}

```{=html}
<!-- This document was used in conjunction with GitHub Copilot (AI) to
write the descriptions -->
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(formatR)
library(dplyr)
```

Let's talk a little bit about structures we can use to store data. These can be complex, so we will just talk about some basic ways in which we will be using them.

## Vectors

A vector is a 1-dimensional (row) structure that can hold multiple elements. For example, we can create a vector that contains 10 numbers such as this one :

<center>![](./images/Vector-1.jpg){width="60%"}</center>

<br>

This example is a 1-dimensional vector that holds 10 values. You can see the **values** that we have saved are 10, 20, 30, 40, 50, 60, 70, 80, 90, and 100. The **index** tells us what position each value is in. The first value is at index 1, the second value is at index 2, and so on. <br>

When creating a new vector, you want to make sure you are giving it a name that makes sense. For example, if you are creating a vector that holds the scores from a test, you might want to name it `test_scores`. This will help you remember what the vector is for when you are working with it later. <br>

In order to create a vector, we can use the `c()` function. This function stands for "combine" and is used to combine multiple values into a single vector. For example, if we wanted to create a vector that holds the numbers from above, we could do it like this:

```{r}

test_scores <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)

class(test_scores)

```

Note : I used the `class()` function to check the type of the object. The output of this command is `numeric`. This tells us that the object is a numeric vector. This is because all of the values in the vector are numbers. <br>

We can access the values by using the index. For example, if we wanted to access the first value in the vector, we could do it like this: `test_scores[1]`. This would return the value `10`.

```{r}

test_scores[1]

```

If I wanted to examine the 4th - 7th entries, I could do it like this: `test_scores[4:7]`. This would return the values `40, 50, 60, 70`.

```{r}

test_scores[4:7]

```

Note that we can't just pick random locations in the vector. For example, if I wanted to print out the values in the 2nd, 5th, and 9th locations? The command `test_scores[2, 5, 9]` would not work. You would get an error message that stops your script.

Instead, we could create a **vector** that holds the locations we want to examine. For example, we could create a vector that holds the values `2, 5, 9` and use this vector in our command :

```{r}

test_scores[c(2, 5, 9)]

```

<br>

You can also create a vector that holds **text** values. For example, you could create a vector that holds the names of the students in a class. This would look something like this:

```{r}

student_names <- c("Alice", "Bob", "Charlie", "David", "Eve", "Frank", "Grace", "Hannah", "Ivy", "Jack")

class(student_names)

```

Notice that this vector is of type `character`. This is because all of the values in the vector are text values. You can access the values in the same way as you would with a numeric vector. For example, if you wanted to access the first value in the vector, you could do it like this: `student_names[1]`.

```{r}

student_names[1]

```

We have seen two examples. The first was a vector that contained numeric values and the second was a vector that contained text values. You can also create a vector that contains a mix of both. For example, you could create a vector that contains the names of the students in a class along with their test scores. This would look something like this:

```{r}

student_data <- c("Alice", 100, "Bob", 90, "Charlie", 80, "David", 70, "Eve", 60, "Frank", 50, "Grace", 40, "Hannah", 30, "Ivy", 20, "Jack", 10)

```

When you create a vector that contains a mix of text and numeric values, you need to be careful. <br>

When you create a vector that contains a mix of text and numeric values, R will convert the text values to a different type. For example, if you have a vector that contains both text and numeric values, the text values will be converted to a type called `character`. This is a type that is used to store text values. For example, if you have a vector that contains the values `10, 20, 30, "Alice", "Bob"`, the text values `"Alice"` and `"Bob"` will be converted to the type `character`. This is because R can't store text values in a vector that is meant to hold numeric values.

```{r}

class(student_data)

```

If a vector contains text and numeric values, the text values will be converted to a different type. For example, if you have a vector that contains both text and numeric values, the text values will be converted to a type called `character`. This is a type that is used to store text values. For example, if you have a vector that contains the values `10, 20, 30, "Alice", "Bob"`, the text values `"Alice"` and `"Bob"` will be converted to the type `character`. This is because R can't store text values in a vector that is meant to hold numeric values.

This can be problematic. For instance, what if we wanted to find the average of the test scores from the `student_data` vector? We would need to convert the text values to numeric values first. We can do this using the `as.numeric()` function. This function converts a vector to a numeric type. For example, if we wanted to convert the `student_data` vector to a numeric type, we could do it like this:

```{r}

student_data <- as.numeric(student_data)

student_data

```

This is interesting because as we see the output, we get `NA` values. This is because the `as.numeric()` function can't convert text values to numeric values. When it encounters a text value, it returns `NA`. This is a special value that is used to represent missing or undefined values. In this case, it is used to represent the text values that couldn't be converted to numeric values. <br>

So if we wanted to then find the average of the test scores, we could pull out the score sand save them into another vector. The test scores are in indices 2, 3, 6, 8, 10, 12, 14, 16, 18 and 20. We could save these into a new vector called `test_scores2` and then find the average like this:

```{r}

test_scores2 <- student_data[c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)]

```

Let's check the vector to make sure it is correct :

```{r}

test_scores2

```

We can now find the average using the `mean()` function. This function calculates the average of a vector. For example, if we wanted to find the average of the test scores, we could do it like this:

```{r}

mean(test_scores2)

```

The reason why a vector is not useful here is because it is trying to save two different forms of data at once. We are trying to save text and numeric data in the same vector. This is not a good idea. Surely there is an easier way to store the data! That is where data frames come in.

## Data Frames

A data frame is a 2-dimensional (row and column) structure that can hold multiple elements. It is similar to a matrix, but it can hold different types of data in each column. For example, you could create a data frame that holds the names of the students in a class along with their test scores. This would look something like this:

<center>![](./images/Vector-2.jpg){width="90%"}</center>

<br>

This example is a 2-dimensional data frame that holds 10 rows and 2 columns. This is an example of a **data frame**. In a data frame, each row is called an **observation** and each column is called a **variable**. This data frame has two variables: `name` and `test_score`. The `name` variable holds the names of the students in the class, while the `test_score` variable holds the test scores of the students. <br>

When creating a new data frame, you want to make sure you are giving it a name that makes sense. For example, if you are creating a data frame that holds the names of the students in a class along with their test scores, you might want to name it `student_data`. This will help you remember what the data frame is for when you are working with it later. <br>

In order to create a data frame, we can use the `data.frame()` function. This function is used to create a new data frame. For example, if we wanted to create a data frame that holds the names of the students in a class along with their test scores, we could do it like this:

```{r}

student_data <- data.frame(
  name = c("Alice", "Bob", "Charlie", "David", "Eve", "Frank", "Grace", "Hannah", "Ivy", "Jack"),
  test_score = c(100, 90, 80, 70, 60, 50, 40, 30, 20, 10)
)

class(student_data)

```

In this example, we are creating a data one column at a time. Since we named these columns as `name` and `test_score`, we can access the values in the same way as we would with a vector. For example, if we wanted to access the first value in the `name` column, we could do it like this: `student_data$name[1]`. This would return the value `Alice`.

```{r}

student_data$name[1]

```

Similarly, if we wanted to access the first value in the `test_score` column, we could do it like this: `student_data$test_score[1]`. This would return the value `100`.

```{r}

student_data$test_score[1]

```

We could also the value in the fifth row and second column like this:

```{r}

student_data[5, 2]

```

If we wanted to print out the entire first column, we could do it like this:

```{r}

student_data$name

```

If we wanted to print out the entire second column, we could do it like this:

```{r}

student_data$test_score

```

What happens if we wanted to print out the entore data frame? We could do it like this:

```{r}

student_data

```

These commands are nice, but if you have a large data set then just printing it off can be a bit overwhelming. We can use the `head()` function to print out the first few rows of the data frame. For example, if we wanted to print out the first 3 rows of the data frame, we could do it like this:

```{r}

head(student_data, 3)

```

If we wanted to print out the last few rows of the data frame, we could use the `tail()` function. For example, if we wanted to print out the last 5 rows

```{r}

tail(student_data, 5)

```

The default amount of lines for `head()` and `tail()` is 6. If you don't specify an amount of lines, it will print out 6 lines.

```{r}

head(student_data)

```

How is a data frame different from a tibble? Let's talk about that next.

## Tibbles

A tibble is a modern version of a data frame that is part of the **tidyverse**. It is similar to a data frame, but it has some additional features that make it easier to work with. For example, tibbles have a nicer print method that makes it easier to view the data. They also have some additional functions that make it easier to manipulate the data. For example, you can use the `select()` function to select specific columns from a tibble. You can also use the `filter()` function to filter rows based on a condition. These functions make it easier to work with tibbles than with data frames.

In order to create a tibble, we can use the `tibble()` function. This function is used to create a new tibble. For example, if we wanted to create a tibble that holds the names of the students in a class along with their test scores, we could do it like this:

```{r}
# Make sure tidyverse is installed and loaded up. Remember, if you
# need to install it, use the following :

# install.packages(tidyverse)
```

<br>

```{r}
# If it is already downloaded, then you just need to load up the library :

library(tidyverse)


# I have already installed the tibble package, so I will just load it up

library(tibble)

student_data2 <- tibble(
  name = c("Alice", "Bob", "Charlie", "David", "Eve", "Frank", "Grace", "Hannah", "Ivy", "Jack"),
  test_score = c(100, 90, 80, 70, 60, 50, 40, 30, 20, 10)
)

class(student_data2)

```

In this example, we are creating a tibble that is similar to the data frame we created earlier. The main difference is that this tibble is part of the tidyverse. This means that it has some additional features that make it easier to work with. For example, we can use the `select()` function to select specific columns from the tibble. For example, if we wanted to select the `name` column from the tibble, we could do it like this:

```{r}

select(student_data2, name)

```

If we wanted to select the `test_score` column from the tibble, we could do it like this:

```{r}

select(student_data2, test_score)

```

If I want all of the students that got higher than a 65 for their test score, I could use the `filter()` command to help us out. The `filter()` command needs two arguments. The first is the name of the tibble and the second is the condition that we want to filter on. For example, if we wanted to filter out all of the students that got higher than a 65 on their test, we could do it like this:

```{r}

filter(student_data2, test_score > 65)

```

Another advantage a tibble has over a data frame is that it is easier to work with when you are working with large data sets. For example, if you have a data set that has 1 million rows, it can be difficult to work with a data frame. This is because data frames are stored in memory, and if you have a large data set, it can take up a lot of memory. This can slow down your computer and make it difficult to work with the data. Tibbles are designed to be more memory efficient than data frames. This means that they can handle larger data sets more easily. This makes it easier to work with large data sets in R.


## Conclusion

In conclusion, vectors, data frames, and tibbles are all useful structures that can be used to store data. Vectors are 1-dimensional structures that can hold multiple elements. Data frames are 2-dimensional structures that can hold multiple elements. Tibbles are a modern version of data frames that are part of the tidyverse. They have some additional features that make them easier to work with. All of these structures are useful for storing data in R, and you will likely use all of them at some point when working with data in R.

## Exercises

In this part of the assignment, you will practice creating different types of vectors in R and using common commands associated with them, such as determining their class. Each problem will involve creating a unique type of vector and performing specific operations.

### Problem 1: Numeric Vector

**Task:** Create a numeric vector containing the first 10 positive integers and determine its class.

**Steps:**
1. Create a numeric vector `num_vector` containing the numbers 1 to 10.
2. Determine the class of the vector.

**Code Example:**
```{r}
# Create numeric vector
num_vector <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

# Determine the class of the vector
class_num_vector <- class(num_vector)

num_vector
class_num_vector
```

### Problem 2: Character Vector

**Task:** Create a character vector containing the names of the first five months of the year and determine its class.

**Steps:**
1. Create a character vector `char_vector` containing the names "January", "February", "March", "April", and "May".
2. Determine the class of the vector.

**Code Example:**
```{r}
# Create character vector
char_vector <- c("January", "February", "March", "April", "May")

# Determine the class of the vector
class_char_vector <- class(char_vector)

char_vector
class_char_vector
```

### Problem 3: Logical Vector

**Task:** Create a logical vector containing alternating TRUE and FALSE values for a length of 8 and determine its class.

**Steps:**
1. Create a logical vector `log_vector` with alternating TRUE and FALSE values.
2. Determine the class of the vector.

**Code Example:**
```{r}
# Create logical vector
log_vector <- c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE)

# Determine the class of the vector
class_log_vector <- class(log_vector)

log_vector
class_log_vector
```

### Problem 4: Factor Vector

**Task:** Create a factor vector from a character vector containing three levels: "High", "Medium", and "Low", and determine its class.

**Steps:**
1. Create a character vector `char_levels` with values "High", "Medium", "Low", "High", "Low".
2. Convert this character vector into a factor vector `fact_vector`.
3. Determine the class of the factor vector.

**Code Example:**
```{r}
# Create character vector with levels
char_levels <- c("High", "Medium", "Low", "High", "Low")

# Convert to factor vector
fact_vector <- factor(char_levels, levels = c("Low", "Medium", "High"))

# Determine the class of the factor vector
class_fact_vector <- class(fact_vector)

fact_vector
class_fact_vector
```

### Problem 5: Complex Vector

**Task:** Create a complex vector containing the first four complex numbers with real and imaginary parts, and determine its class.

**Steps:**
1. Create a complex vector `comp_vector` with values `1+2i`, `3+4i`, `5+6i`, `7+8i`.
2. Determine the class of the vector.

**Code Example:**
```{r}
# Create complex vector
comp_vector <- c(1+2i, 3+4i, 5+6i, 7+8i)

# Determine the class of the vector
class_comp_vector <- class(comp_vector)

comp_vector
class_comp_vector
```

In this part of the assignment, you will practice creating different types of data frames in R and using common commands associated with them, such as pulling out values, and using `head()` and `tail()` functions. Each problem will involve creating a unique type of data frame and performing specific operations.

### Problem 6: Creating a Data Frame for Students' Scores

**Task:** Create a data frame containing the names and scores of five students in a math test. Use commands to pull out specific values and display the first few rows of the data frame.

**Steps:**

1. Create a data frame `students_df` with columns `Name` and `Score`.
2. Pull out the score of the student named "Alice".
3. Display the first three rows of the data frame using `head()`.

**Code Example:**

```{r}
# Create data frame
students_df <- data.frame(
  Name = c("Alice", "Bob", "Charlie", "David", "Eve"),
  Score = c(85, 90, 78, 92, 88)
)

# Pull out the score of Alice
alice_score <- students_df$Score[students_df$Name == "Alice"]

# Display the first three rows of the data frame
head_students_df <- head(students_df, 3)

students_df
alice_score
head_students_df
```

### Problem 7: Creating a Data Frame for Monthly Expenses

**Task:** Create a data frame containing the monthly expenses for three categories (Rent, Food, Utilities) over six months. Use commands to pull out specific values and display the last few rows of the data frame.

**Steps:**

1. Create a data frame `expenses_df` with columns `Month`, `Rent`, `Food`, and `Utilities`.
2. Pull out the food expense for the month of March.
3. Display the last two rows of the data frame using `tail()`.

**Code Example:**

```{r}
# Create data frame
expenses_df <- data.frame(
  Month = c("January", "February", "March", "April", "May", "June"),
  Rent = c(1000, 1000, 1000, 1000, 1000, 1000),
  Food = c(300, 320, 310, 330, 340, 350),
  Utilities = c(150, 160, 155, 165, 170, 175)
)

# Pull out the food expense for March
march_food_expense <- expenses_df$Food[expenses_df$Month == "March"]

# Display the last two rows of the data frame
tail_expenses_df <- tail(expenses_df, 2)

expenses_df
march_food_expense
tail_expenses_df
```

### Problem 8: Creating a Data Frame for Employee Information

**Task:** Create a data frame containing the employee information (ID, Name, Department, Salary). Use commands to pull out specific values and display the first few rows of the data frame.

**Steps:**

1. Create a data frame `employee_df` with columns `ID`, `Name`, `Department`, and `Salary`.
2. Pull out the department of the employee with ID 3.
3. Display the first four rows of the data frame using `head()`.

**Code Example:**

```{r}
# Create data frame
employee_df <- data.frame(
  ID = c(1, 2, 3, 4, 5),
  Name = c("John", "Jane", "Doe", "Smith", "Emily"),
  Department = c("HR", "Finance", "IT", "Marketing", "Admin"),
  Salary = c(50000, 60000, 55000, 70000, 65000)
)

# Pull out the department of the employee with ID 3
dept_id_3 <- employee_df$Department[employee_df$ID == 3]

# Display the first four rows of the data frame
head_employee_df <- head(employee_df, 4)

employee_df
dept_id_3
head_employee_df
```

### Problem 9: Creating a Data Frame for Product Sales

**Task:** Create a data frame containing the product sales information (ProductID, ProductName, UnitsSold, Revenue). Use commands to pull out specific values and display the last few rows of the data frame.

**Steps:**

1. Create a data frame `sales_df` with columns `ProductID`, `ProductName`, `UnitsSold`, and `Revenue`.
2. Pull out the revenue of the product named "Tablet".
3. Display the last three rows of the data frame using `tail()`.

**Code Example:**

```{r}
# Create data frame
sales_df <- data.frame(
  ProductID = c(101, 102, 103, 104, 105),
  ProductName = c("Laptop", "Tablet", "Smartphone", "Desktop", "Monitor"),
  UnitsSold = c(50, 100, 200, 30, 80),
  Revenue = c(50000, 30000, 40000, 15000, 20000)
)

# Pull out the revenue of the product named Tablet
tablet_revenue <- sales_df$Revenue[sales_df$ProductName == "Tablet"]

# Display the last three rows of the data frame
tail_sales_df <- tail(sales_df, 3)

sales_df
tablet_revenue
tail_sales_df
```

### Problem 10: Creating a Data Frame for Weather Data

**Task:** Create a data frame containing the weather data (Day, Temperature, Humidity, WindSpeed). Use commands to pull out specific values and display the first and last few rows of the data frame.

**Steps:**

1. Create a data frame `weather_df` with columns `Day`, `Temperature`, `Humidity`, and `WindSpeed`.
2. Pull out the temperature on the 5th day.
3. Display the first two and last two rows of the data frame using `head()` and `tail()`.

**Code Example:**

```{r}
# Create data frame
weather_df <- data.frame(
  Day = 1:10,
  Temperature = c(25, 27, 24, 26, 28, 29, 30, 31, 32, 33),
  Humidity = c(80, 82, 78, 76, 79, 81, 83, 85, 84, 86),
  WindSpeed = c(10, 12, 11, 13, 14, 15, 16, 17, 18, 19)
)

# Pull out the temperature on the 5th day
temp_day_5 <- weather_df$Temperature[weather_df$Day == 5]

# Display the first two rows of the data frame
head_weather_df <- head(weather_df, 2)

# Display the last two rows of the data frame
tail_weather_df <- tail(weather_df, 2)

weather_df
temp_day_5
head_weather_df
tail_weather_df
```
<br>

In this part of the assignment, you will practice creating different types of tibbles in R and using common commands associated with them, such as creating a tibble, converting a data frame to a tibble, selecting columns, and filtering rows. Each problem will involve creating or manipulating tibbles and performing specific operations.

### Problem 11: Creating a Tibble for Students' Scores

**Task:** Create a tibble containing the names and scores of five students in a math test. Use commands to select specific columns and display the tibble.

**Steps:**

1. Create a tibble `students_tbl` with columns `Name` and `Score`.
2. Select the `Name` column from the tibble.
3. Display the entire tibble.

**Code Example:**

```{r}
# Load the tibble package
library(tibble)

# Create tibble
students_tbl <- tibble(
  Name = c("Alice", "Bob", "Charlie", "David", "Eve"),
  Score = c(85, 90, 78, 92, 88)
)

# Select the Name column
name_column <- select(students_tbl, Name)

# Display the tibble
students_tbl
name_column
```

### Problem 12: Converting a Data Frame to a Tibble for Monthly Expenses

**Task:** Create a data frame containing the monthly expenses for three categories (Rent, Food, Utilities) over six months and convert it to a tibble. Use commands to filter specific rows and display the tibble.

**Steps:**

1. Create a data frame `expenses_df` with columns `Month`, `Rent`, `Food`, and `Utilities`.
2. Convert the data frame to a tibble `expenses_tbl`.
3. Filter the tibble to include only the rows where `Rent` is greater than 1000.
4. Display the entire tibble.

**Code Example:**

```{r}
# Create data frame
expenses_df <- data.frame(
  Month = c("January", "February", "March", "April", "May", "June"),
  Rent = c(1000, 1000, 1000, 1000, 1000, 1000),
  Food = c(300, 320, 310, 330, 340, 350),
  Utilities = c(150, 160, 155, 165, 170, 175)
)

# Convert data frame to tibble
expenses_tbl <- as_tibble(expenses_df)

# Filter the tibble
filtered_expenses_tbl <- filter(expenses_tbl, Rent > 1000)

# Display the tibble
expenses_tbl
filtered_expenses_tbl
```

### Problem 13: Creating a Tibble for Employee Information and Selecting Columns

**Task:** Create a tibble containing the employee information (ID, Name, Department, Salary). Use commands to select specific columns and display the tibble.

**Steps:**

1. Create a tibble `employee_tbl` with columns `ID`, `Name`, `Department`, and `Salary`.
2. Select the `Name` and `Salary` columns from the tibble.
3. Display the entire tibble.

**Code Example:**

```{r}
# Load the tibble package
library(tibble)

# Create tibble
employee_tbl <- tibble(
  ID = c(1, 2, 3, 4, 5),
  Name = c("John", "Jane", "Doe", "Smith", "Emily"),
  Department = c("HR", "Finance", "IT", "Marketing", "Admin"),
  Salary = c(50000, 60000, 55000, 70000, 65000)
)

# Select the Name and Salary columns
name_salary_columns <- select(employee_tbl, Name, Salary)

# Display the tibble
employee_tbl
name_salary_columns
```

### Problem 14: Creating a Tibble for Product Sales and Filtering Rows

**Task:** Create a tibble containing the product sales information (ProductID, ProductName, UnitsSold, Revenue). Use commands to filter specific rows and display the tibble.

**Steps:**

1. Create a tibble `sales_tbl` with columns `ProductID`, `ProductName`, `UnitsSold`, and `Revenue`.
2. Filter the tibble to include only the rows where `UnitsSold` is greater than 50.
3. Display the entire tibble.

**Code Example:**

```{r}
# Load the tibble package
library(tibble)

# Create tibble
sales_tbl <- tibble(
  ProductID = c(101, 102, 103, 104, 105),
  ProductName = c("Laptop", "Tablet", "Smartphone", "Desktop", "Monitor"),
  UnitsSold = c(50, 100, 200, 30, 80),
  Revenue = c(50000, 30000, 40000, 15000, 20000)
)

# Filter the tibble
filtered_sales_tbl <- filter(sales_tbl, UnitsSold > 50)

# Display the tibble
sales_tbl
filtered_sales_tbl
```

### Problem 15: Creating a Tibble for Weather Data and Using `head()` and `tail()`

**Task:** Create a tibble containing the weather data (Day, Temperature, Humidity, WindSpeed). Use commands to display the first and last few rows of the tibble.

**Steps:**

1. Create a tibble `weather_tbl` with columns `Day`, `Temperature`, `Humidity`, and `WindSpeed`.
2. Display the first three rows of the tibble using `head()`.
3. Display the last three rows of the tibble using `tail()`.

**Code Example:**

```{r}
# Load the tibble package
library(tibble)

# Create tibble
weather_tbl <- tibble(
  Day = 1:10,
  Temperature = c(25, 27, 24, 26, 28, 29, 30, 31, 32, 33),
  Humidity = c(80, 82, 78, 76, 79, 81, 83, 85, 84, 86),
  WindSpeed = c(10, 12, 11, 13, 14, 15, 16, 17, 18, 19)
)

# Display the first three rows of the tibble
head_weather_tbl <- head(weather_tbl, 3)

# Display the last three rows of the tibble
tail_weather_tbl <- tail(weather_tbl, 3)

weather_tbl
head_weather_tbl
tail_weather_tbl
```



